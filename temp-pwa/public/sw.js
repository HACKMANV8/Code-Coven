// Custom Service Worker for SafeLink PWA
// This file is auto-generated by vite-plugin-pwa, but you can customize it

self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  event.waitUntil(clients.claim());
});

// Handle push notifications
self.addEventListener('push', (event) => {
  console.log('Push notification received:', event);

  const options = {
    icon: '/pwa-192x192.png',
    badge: '/pwa-192x192.png',
    vibrate: [200, 100, 200],
    actions: [
      {
        action: 'view',
        title: 'View Location',
      },
      {
        action: 'dismiss',
        title: 'Dismiss',
      },
    ],
  };

  if (event.data) {
    const data = event.data.json();
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'SafeLink Alert', {
        body: data.body || 'Emergency alert received',
        data: data,
        ...options,
      })
    );
  } else {
    event.waitUntil(
      self.registration.showNotification('SafeLink Alert', {
        body: 'New emergency alert',
        ...options,
      })
    );
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event);
  
  event.notification.close();

  if (event.action === 'view') {
    // Open the app to view location
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// Background sync for offline alerts
self.addEventListener('sync', (event) => {
  console.log('Background sync triggered:', event.tag);
  
  if (event.tag === 'sync-alerts') {
    event.waitUntil(syncOfflineAlerts());
  }
});

async function syncOfflineAlerts() {
  // This would sync with your backend
  console.log('Syncing offline alerts...');
  
  try {
    // Get alerts from IndexedDB and send to backend
    const db = await openDatabase();
    const transaction = db.transaction(['offlineAlerts'], 'readonly');
    const store = transaction.objectStore('offlineAlerts');
    const alerts = await getAll(store);

    for (const alert of alerts) {
      try {
        await fetch('/api/alerts/emergency', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(alert),
        });

        // Remove from IndexedDB after successful sync
        const deleteTransaction = db.transaction(['offlineAlerts'], 'readwrite');
        const deleteStore = deleteTransaction.objectStore('offlineAlerts');
        await deleteFromStore(deleteStore, alert.timestamp);
      } catch (error) {
        console.error('Failed to sync alert:', error);
      }
    }
  } catch (error) {
    console.error('Error syncing offline alerts:', error);
  }
}

function openDatabase() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('SafeLinkDB', 1);
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
  });
}

function getAll(store) {
  return new Promise((resolve, reject) => {
    const request = store.getAll();
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
  });
}

function deleteFromStore(store, key) {
  return new Promise((resolve, reject) => {
    const request = store.delete(key);
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
  });
}
